<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scripts | Alexey Zagalsky]]></title>
  <link href="http://alexeyza.com/blog/categories/scripts/atom.xml" rel="self"/>
  <link href="http://alexeyza.com/"/>
  <updated>2016-09-28T20:24:46-07:00</updated>
  <id>http://alexeyza.com/</id>
  <author>
    <name><![CDATA[Alexey Zagalsky]]></name>
    <email><![CDATA[alexeyza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up a Go Development Environment With Sublime Text]]></title>
    <link href="http://alexeyza.com/blog/2016/09/28/setting-up-a-go-development-environment-with-sublimetext/"/>
    <updated>2016-09-28T15:44:18-07:00</updated>
    <id>http://alexeyza.com/blog/2016/09/28/setting-up-a-go-development-environment-with-sublimetext</id>
    <content type="html"><![CDATA[<p><img style="float:left; margin: 8px 20px" src="http://alexeyza.com/images/gogo.png" widht="180" height="180" title="Go!"/></p>

<p>I really love the <a href="https://golang.org/">Go</a> programming language, it feels like a mix of the best of Java and Python together. But I found that setting a Go development environment can be slightly tricky, mostly in figuring out how to set up the proper path variables.</p>

<p>Here, I provide a short guide on how to set up a Go development environment with Sublime Text 3 on Ubuntu/Linux. I hope it saves you (and my future-self) time when installing, updating, or re-installing the development environment.</p>

<!--more-->


<p><br></p>

<h2>Installing / Updating Go</h2>

<p>If you&rsquo;re updating a previously installed Go version, you must first delete the older one:
<code>
sudo rm -r /usr/local/go
</code></p>

<p>Download the latest version of Go archive from <a href="https://golang.org/dl/">https://golang.org/dl/</a> and extract it:
<code>bash
sudo tar -C /usr/local -xzf go1.7.1.linux-amd64.tar.gz
</code>
Note: some people use the Go version manager (<a href="https://github.com/moovweb/gvm">GVM</a>) to install and set up Go, a tool similar to <a href="https://github.com/creationix/nvm">NVM</a> which I use highly recommend for Node.js, but for Go I prefer to set up everything myself.</p>

<p>Next, set the PATH environment variables by adding the following to <code>.bashrc</code>:
<code>
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/go
</code>
Here I use <code>home/alexeyza/go</code> as my workspace (which is <code>$HOME/go</code>), but feel free to change it according to your preference.</p>

<p>And, create your workspace:
<code>bash
mkdir -p ~/go/src/github.com/alexeyza
</code></p>

<p><br></p>

<h2>Setting up Sublime Text</h2>

<p>Sublime text is my editor of choice for many things, and I highly recommend it for Go. If you don&rsquo;t have it installed, start by installing <a href="http://www.webupd8.org/2013/07/sublime-text-3-ubuntu-ppa-now-available.html">Sublime Text 3</a>, and installing the <a href="https://packagecontrol.io/installation">Package Control</a> plugin.</p>

<p>Install <a href="https://github.com/DisposaBoy/GoSublime">GoSublime</a> through package control (<code>CTRL+Shift+P</code>). It&rsquo;s a Sublime Text plugin that provides Go code completion and other IDE-like features.</p>

<p>Next, set up the PATH environment variables for Sublime Text. This setting has slightly changed over the years (which is why you may find different variations online), but my current set up works with the following settings in <code>Preferences -&gt; Package Settings -&gt; GoSublime -&gt; Settings-User</code>.<br/>
Make sure the GOPATH matches the path configured earlier.
<code>json
{
    "env": {
        "GOPATH": "$HOME/go",
        "GOROOT": "/usr/local/go"
    }
}
</code></p>

<p>Now, save and restart Sublime Text. When you first restart Sublime Text after installing GoSublime, it may take a few seconds to install and set up MarGo.</p>

<p><br></p>

<h2>Building and Running Go code</h2>

<p>You can build, compile, and run your code directly from Sublime Text. Use <code>CTRL+B</code> or <code>CTRL+9</code> like so:</p>

<p><img src="/images/go_hello_world.gif" alt="hello world example" /></p>

<p>For additional help, type <code># help</code> in the Sublime Text console.</p>

<p><br></p>

<h2>Useful Go Plugins</h2>

<p>Popular Go plugins that work well with GoSublime are <a href="https://github.com/waigani/GoOracle">GoOracle</a>, <a href="https://godoc.org/golang.org/x/tools/cmd/goimports">GoImports</a>, and <a href="https://godoc.org/golang.org/x/tools/cmd/godoc">GoDoc</a>.</p>

<p>You can install them with:
<code>bash
go get -u golang.org/x/tools/cmd/oracle
go get -u golang.org/x/tools/cmd/goimports
go get -u golang.org/x/tools/cmd/godoc
</code>
Read more <a href="https://www.wolfe.id.au/2015/03/05/using-sublime-text-for-go-development/">here</a> on how to configure these plugins to work with GoSublime.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Node.js]]></title>
    <link href="http://alexeyza.com/blog/2015/09/28/getting-started-with-node-dot-js/"/>
    <updated>2015-09-28T13:21:02-07:00</updated>
    <id>http://alexeyza.com/blog/2015/09/28/getting-started-with-node-dot-js</id>
    <content type="html"><![CDATA[<p><img style="float:left; margin: 8px 20px" src="http://alexeyza.com/images/nodejs.png" widht="180" height="180" title="Node.js"/></p>

<p>The <a href="https://nodejs.org/en/">Node.js</a> project and its community have undergone major changes in recent years, among which is the forking of the project (and perhaps the community itself). This situation causes confusion for newcomers, who find themselves with compatibility issues and difficulties in setting up a working and up-to-date environment.</p>

<p>In this post, I show how to get the recent version of Node.js on a Linux OS in an easy way.</p>

<!--more-->


<h2>What is Node.JS</h2>

<p>Node.js is an event-driven I/O <strong>server-side</strong> (backend) JavaScript environment based on Chrome&rsquo;s V8 JavaScript engine. It is considered a very popular backend environment, and it uses <a href="https://www.npmjs.com/">NPM</a>, the best package manager in my opinion (however, we&rsquo;ll leave the discussion on what makes NPM so good for a different post).</p>

<p>At some point, Node.js <a href="http://anandmanisankar.com/posts/nodejs-iojs-why-the-fork/">was forked</a> into two projects: <strong>Node.js</strong> and <strong>IO.js</strong>, causing compatibility issues and disputes in the community. While recently, these projects have been <a href="http://www.infoworld.com/article/2960452/javascript/unforked-iojs-v3-sets-stage-for-nodejs-merger.html">merged back</a> with Node v4.x.</p>

<p>However, not everyone have caught on with the recent changes (which at some point should be a thing of the past). My OS of choice, Ubuntu, only supports <a href="https://nodejs.org/en/download/releases/">Node.js 0.12.7</a> through the official repositories. Where version 0.12.7 is the latest stable version <strong>prior</strong> to the forking of the project. Thus, the best way to get the current version of Node.js on Linux is through <a href="https://github.com/creationix/nvm">NVM</a>.</p>

<h2>Removing the older version of Node</h2>

<p>First, create a <strong>backup</strong> list of the previously globally installed NPM packages:
<code>bash
npm ls -gp &gt; node_packages.txt
</code></p>

<p>If you installed Node.js through <code>apt-get</code>, uninstall by using the following:
<code>bash
sudo apt-get remove nodejs
</code></p>

<p>Additionally, your home folder may contain a <code>.npm</code> folder that can be removed (since NVM will use its own path for NPM packages).</p>

<h2>Installing Node.js with NVM</h2>

<p>Grab the latest copy of NVM (you may need to <code>sudo apt-get install curl</code> first):
<code>bash
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.27.1/install.sh | bash
</code>
Update NVM to latest version:
<code>bash
cd ~/.nvm
git pull origin master
</code>
Then restart your terminal window, and install the latest Node version:
<code>bash
nvm install stable
</code>
or if you want a specific version (e.g., version 4.1.1):
<code>bash
nvm install 4.1.1
</code>
And tell NVM which version of Node you want to use (when a specific version is needed):
<code>bash
nvm use 4.1.1
</code></p>

<p>Define a default version, so that you don&rsquo;t have to pick a Node version each time you start your terminal. This will <strong>activate</strong> the specified version each time the terminal starts, and it will do it <strong>silently</strong>.
<code>bash
nvm alias default stable
</code></p>

<p>And lastly, check the installed version of Node:
<code>bash
node --version
</code></p>

<p>When updating to a newer version:
<code>bash
nvm ls
nvm install stable
nvm ls
nvm uninstall 4.1.1
</code></p>

<p>If later on you encounter errors with installing packages <em>globaly</em>, make sure your <code>NODE_PATH</code> is defined. You can do so by adding the following to <code>~/.bashrc</code> or <code>~/.zshrc</code>:
<code>
export NODE_PATH=$NODE_PATH:/home/alexeyza/.nvm/versions/node/v4.1.1/lib/node_modules
</code></p>

<p><br>
<br></p>

<hr />

<p>The above steps are mostly based on a Stack Overflow <a href="http://askubuntu.com/questions/672994/how-to-install-nodejs-4-on-ubuntu-15-04-64-bit-edition/673046#673046">answer</a> and the NVM <a href="https://github.com/creationix/nvm">docs</a>, with minor changes to make it more sustainable for future updates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Line Fun]]></title>
    <link href="http://alexeyza.com/blog/2015/09/02/command-line-fun/"/>
    <updated>2015-09-02T15:42:19-07:00</updated>
    <id>http://alexeyza.com/blog/2015/09/02/command-line-fun</id>
    <content type="html"><![CDATA[<p>I recently discovered a superb <a href="http://www.shavua.net/">podcast on startups</a> (in Hebrew). And, I wanted to download the episodes, so that I can listen to it when I commute to work. The podcast homepage has a page for each episode, with a download link at the bottom.</p>

<p>However, instead of downloading each episode manually, I decided to find an easier way, with the use of the command line. And to make it more interesting, I wanted to accomplish this with a single command line.</p>

<pre><code class="bash">wget -q -O - "$@" http://simplecast.fm/podcasts/173/rss | grep -o "http://.*.mp3" | xargs wget
</code></pre>

<p>The first part brings the content, in quiet mode, to allow piping into <code>grep</code>. The second part extracts the episode file names and paths, in my case they are all mp3 files. And the last part downloads all the files. I used the RSS feed instead of the podcast homepage as a way to have all the content in a single file.</p>

<p>I wonder, can this be done with a single <code>wget</code> command?</p>

<p>BTW, a useful tool for experimenting with regular expressions is <a href="http://regexr.com/">RegExr</a>.</p>
]]></content>
  </entry>
  
</feed>
